<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <GradientStopCollection x:Key="MyGlassGradientStopsResource">
        <GradientStop Color="WhiteSmoke" Offset="0.2" />
        <GradientStop Color="Transparent" Offset="0.4" />
        <GradientStop Color="WhiteSmoke" Offset="0.5" />
        <GradientStop Color="Transparent" Offset="0.75" />
        <GradientStop Color="WhiteSmoke" Offset="0.9" />
        <GradientStop Color="Transparent" Offset="1" />
    </GradientStopCollection>

    <LinearGradientBrush x:Key="MyGlassBrushResource" StartPoint="0,0" EndPoint="1,1" Opacity="0.75" 
        GradientStops="{StaticResource MyGlassGradientStopsResource}" />

    <GradientStopCollection x:Key="MyGlassRadialGradientStopsResource">
        <GradientStop Color="WhiteSmoke" Offset="0.2" />
        <GradientStop Color="Transparent" Offset="0.4" />
        <GradientStop Color="WhiteSmoke" Offset="0.5" />
        <GradientStop Color="Transparent" Offset="0.75" />
        <GradientStop Color="WhiteSmoke" Offset="0.9" />
        <GradientStop Color="Transparent" Offset="1" />
    </GradientStopCollection>

    <RadialGradientBrush x:Key="MyGlassRadialBrushResource" GradientOrigin="0.75,0.25" Center="0.5,0.5" 
          RadiusX="0.5" RadiusY="0.5"
        GradientStops="{StaticResource MyGlassRadialGradientStopsResource}" />

    <LinearGradientBrush x:Key="GrayBlueGradientBrush" StartPoint="0,0" EndPoint="1,1">
        <GradientStop Color="DarkGray" Offset="0" />
        <GradientStop Color="#CCCCFF" Offset="0.5" />
        <GradientStop Color="DarkGray" Offset="1" />
    </LinearGradientBrush>
    <Style TargetType="TextBox" x:Key="RedBox">
        <Setter Property="BorderThickness" Value="3" />
        <Setter Property="BorderBrush" Value="Red" />
    </Style>

    <Style x:Key="FancyButton"  TargetType="{x:Type Button}" >
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" ClipToBounds="False">
                        <!-- Outer Rectangle with rounded corners. -->
                        <Rectangle x:Name="outerRectangle" HorizontalAlignment="Stretch" 
                          VerticalAlignment="Stretch" Stroke="{TemplateBinding Background}" 
                          RadiusX="10" RadiusY="10" StrokeThickness="5" Fill="Transparent" />

                        <!-- Outer Highlight Rectangle with rounded corners for default buttons. -->
                        <Rectangle x:Name="outerRectangleHighlight" HorizontalAlignment="Stretch" 
                                   VerticalAlignment="Stretch" 
                                   StrokeDashArray="0 2 10" Stroke="DeepSkyBlue" StrokeThickness="1" 
                                   RadiusX="100" RadiusY="100" Opacity="0"  />

                        <!-- Inner Rectangle with rounded corners. -->
                        <Rectangle x:Name="innerRectangle" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Stroke="Transparent" 
                            StrokeThickness="20" Fill="{TemplateBinding Background}" RadiusX="10" RadiusY="10" />

                        <!-- Glass Rectangle -->
                        <Rectangle x:Name="glassCube" Width="100" Height="50"
                                StrokeThickness="2" RadiusX="10" RadiusY="10" Opacity="0" 
                                Fill="{StaticResource MyGlassBrushResource}" RenderTransformOrigin="0.5,0.5">
                            <Rectangle.Stroke>
                                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                    <LinearGradientBrush.GradientStops>
                                        <GradientStop Offset="0.0" Color="LightBlue" />
                                        <GradientStop Offset="1.0" Color="Gray" />
                                    </LinearGradientBrush.GradientStops>
                                </LinearGradientBrush>
                            </Rectangle.Stroke>

                            <!-- These transforms have no effect as they are declared here. 
                                The reason the transforms are included is to be targets for animation (see later). -->
                            <Rectangle.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform />
                                    <RotateTransform Angle="0" CenterX="0.5" CenterY="0.5"/>
                                </TransformGroup>
                            </Rectangle.RenderTransform>
                            
                            <Rectangle.LayoutTransform>
                                <TransformGroup>
                                    <ScaleTransform />
                                    <RotateTransform Angle="0" CenterX="0.5" CenterY="0.5"/>
                                </TransformGroup>
                            </Rectangle.LayoutTransform>

                            <!-- A BevelBitmapEffect is applied to give the button a "Beveled" look. -->
                            <Rectangle.BitmapEffect>
                                <BevelBitmapEffect />
                            </Rectangle.BitmapEffect>
                        </Rectangle>

                        <!-- Present Text of the button. -->
                        <DockPanel Name="myContentPresenterDockPanel" ClipToBounds="False">
                            <ContentPresenter x:Name="myContentPresenter" RecognizesAccessKey="True" Margin="4" Content="{TemplateBinding  Content}" TextBlock.Foreground="Black" ClipToBounds="False" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </DockPanel>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <!-- Animation fires when button is clicked, causing glass to spin.  -->
                        <EventTrigger RoutedEvent="Button.Click">
                            <EventTrigger.Actions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <!--<DoubleAnimation Storyboard.TargetName="glassCube" Storyboard.TargetProperty=
                                          "(Rectangle.RenderTransform).(TransformGroup.Children)[1].(RotateTransform.Angle)" 
                                          By="360" Duration="0:0:0.5"/>-->
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Button.Opacity" Value="0.4" />
                        </Trigger>
                        <Trigger Property="IsDefault" Value="True">
                            <Setter Property ="Rectangle.Opacity" TargetName="outerRectangleHighlight"
                                  Value="1" />
                        </Trigger>
                        <!-- Set properties when mouse pointer is over the button. -->
                        <Trigger Property="IsMouseOver" Value="True">

                            <!-- Below are three property settings that occur when the condition is met (user mouses over button).  -->
                            <!-- Change the color of the outer rectangle when user mouses over it. -->
                            <Setter Property ="Rectangle.Stroke" TargetName="outerRectangle"
                                  Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />

                            <!-- Sets the glass opacity to 1, therefore, the glass "appears" when user mouses over it. -->
                            <Setter Property="Rectangle.Opacity" Value="1" TargetName="glassCube" />

                            <!-- Makes the text slightly blurry as though you were looking at it through blurry glass. -->
                            <Setter Property="ContentPresenter.BitmapEffect" TargetName="myContentPresenter">
                                <Setter.Value>
                                    <BlurBitmapEffect Radius="1" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <!-- Set properties when button has focus. -->
                        <Trigger Property="IsFocused" Value="true">
                            <Setter Property="Rectangle.Opacity" Value="1"       TargetName="glassCube" />
                            <Setter Property="Rectangle.Stroke" TargetName="outerRectangle"
                                  Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            <Setter Property="Rectangle.Opacity" Value="1" TargetName="glassCube" />
                        </Trigger>
                        <!-- Animations that start when mouse enters and leaves button. -->
                        <EventTrigger RoutedEvent="Mouse.MouseEnter">
                            <EventTrigger.Actions>
                                <BeginStoryboard Name="mouseEnterBeginStoryboard">
                                    <Storyboard>

                                        <!-- This animation makes the glass rectangle shrink in the X direction. -->
                                        <!--<DoubleAnimation Storyboard.TargetName="glassCube" Storyboard.TargetProperty=
                                              "(Rectangle.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                              By="-0.1" Duration="0:0:0.5"  RepeatBehavior="1900" />-->

                                        <!-- This animation makes the glass rectangle shrink in the Y direction. -->
                                        <!--<DoubleAnimation Storyboard.TargetName="glassCube"  Storyboard.TargetProperty=
                                              "(Rectangle.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" 
                                              By="-0.1" Duration="0:0:0.5"  RepeatBehavior="300" />-->
                                        <!--<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)" Storyboard.TargetName="glassCube">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1" Value="40"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:2" Value="90"/>
                                        </DoubleAnimationUsingKeyFrames>-->
                                        <!--<DoubleAnimation 
                                        Storyboard.TargetName="glassCube"
                                            Storyboard.TargetProperty="(RenderTransform).(RotateTransform.Angle)"
                                             From="-45" To="45" Duration="0:0:1" AutoReverse="True"  RepeatBehavior="Forever"/>-->
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RenderTransform).(TransformGroup.Children)[1].(RotateTransform.Angle)" Storyboard.TargetName="glassCube">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="20"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="40"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.6" Value="60"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.8" Value="80"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1.0" Value="100"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1.2" Value="110"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1.4" Value="120"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1.6" Value="140"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1.8" Value="160"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:2.0" Value="180"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:2.2" Value="180"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:2.4" Value="160"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:2.6" Value="140"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:2.8" Value="120"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:3.0" Value="100"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:3.2" Value="80"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:3.4" Value="60"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:3.6" Value="40"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:3.8" Value="20"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:4.0" Value="0"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <!--<DoubleAnimation
                            Storyboard.TargetProperty="(Rectangle.RenderTransform).(TransformGroup.Children)[1].(RotateTransform.Angle)" Storyboard.TargetName="glassCube"
                            From="0" To="90" Duration="0:0:2" AutoReverse="False"/>
                                        <DoubleAnimation
                            Storyboard.TargetProperty="(Rectangle.RenderTransform).(TransformGroup.Children)[1].(RotateTransform.Angle)" Storyboard.TargetName="glassCube"
                            From="90" To="0" Duration="0:0:1" AutoReverse="False"/>-->                                        
                                        <!--<DoubleAnimation
                            Storyboard.TargetProperty="(Rectangle.RenderTransform).(TransformGroup.Children)[1].(RotateTransform.Angle)" Storyboard.TargetName="glassCube"
                            From="0" To="-40" Duration="0:0:0.15" AutoReverse="False"/>
                                        <DoubleAnimation
                            Storyboard.TargetProperty="(Rectangle.RenderTransform).(TransformGroup.Children)[1].(RotateTransform.Angle)" Storyboard.TargetName="glassCube"
                            From="0" To="-60" Duration="0:0:0.15" AutoReverse="False"/>
                                        <DoubleAnimation
                            Storyboard.TargetProperty="(Rectangle.RenderTransform).(TransformGroup.Children)[1].(RotateTransform.Angle)" Storyboard.TargetName="glassCube"
                            From="0" To="-80" Duration="0:0:0.15" AutoReverse="False"/>
                                        <DoubleAnimation
                            Storyboard.TargetProperty="(Rectangle.RenderTransform).(TransformGroup.Children)[1].(RotateTransform.Angle)" Storyboard.TargetName="glassCube"
                            From="0" To="-100" Duration="0:0:0.15" AutoReverse="False"/>
                                        <DoubleAnimation
                            Storyboard.TargetProperty="(Rectangle.RenderTransform).(TransformGroup.Children)[1].(RotateTransform.Angle)" Storyboard.TargetName="glassCube"
                            From="0" To="-120" Duration="0:0:0.15" AutoReverse="False"/>
                                        <DoubleAnimation
                            Storyboard.TargetProperty="(Rectangle.RenderTransform).(TransformGroup.Children)[1].(RotateTransform.Angle)" Storyboard.TargetName="glassCube"
                            From="0" To="-140" Duration="0:0:0.15" AutoReverse="False"/>
                                        <DoubleAnimation
                            Storyboard.TargetProperty="(Rectangle.RenderTransform).(TransformGroup.Children)[1].(RotateTransform.Angle)" Storyboard.TargetName="glassCube"
                            From="0" To="-160" Duration="0:0:0.15" AutoReverse="False"/>
                                        <DoubleAnimation
                            Storyboard.TargetProperty="(Rectangle.RenderTransform).(TransformGroup.Children)[1].(RotateTransform.Angle)" Storyboard.TargetName="glassCube"
                            From="20" To="-180" Duration="0:0:0.15" AutoReverse="False"/>-->

                                        <!--<DoubleAnimation
                            Storyboard.TargetProperty="(Rectangle.RenderTransform).(TransformGroup.Children)[1].(RotateTransform.Angle)" Storyboard.TargetName="glassCube"
                            From="-180" To="-160" Duration="0:0:0.15" AutoReverse="False"/>
                                        <DoubleAnimation
                            Storyboard.TargetProperty="(Rectangle.RenderTransform).(TransformGroup.Children)[1].(RotateTransform.Angle)" Storyboard.TargetName="glassCube"
                            From="-160" To="-140" Duration="0:0:0.15" AutoReverse="False"/>
                                        <DoubleAnimation
                            Storyboard.TargetProperty="(Rectangle.RenderTransform).(TransformGroup.Children)[1].(RotateTransform.Angle)" Storyboard.TargetName="glassCube"
                            From="-140" To="-120" Duration="0:0:0.15" AutoReverse="False"/>
                                        <DoubleAnimation
                            Storyboard.TargetProperty="(Rectangle.RenderTransform).(TransformGroup.Children)[1].(RotateTransform.Angle)" Storyboard.TargetName="glassCube"
                            From="-120" To="-100" Duration="0:0:0.15" AutoReverse="False"/>
                                        <DoubleAnimation
                            Storyboard.TargetProperty="(Rectangle.RenderTransform).(TransformGroup.Children)[1].(RotateTransform.Angle)" Storyboard.TargetName="glassCube"
                            From="-100" To="-80" Duration="0:0:0.15" AutoReverse="False"/>
                                        <DoubleAnimation
                            Storyboard.TargetProperty="(Rectangle.RenderTransform).(TransformGroup.Children)[1].(RotateTransform.Angle)" Storyboard.TargetName="glassCube"
                            From="-80" To="-60" Duration="0:0:0.15" AutoReverse="False"/>
                                        <DoubleAnimation
                            Storyboard.TargetProperty="(Rectangle.RenderTransform).(TransformGroup.Children)[1].(RotateTransform.Angle)" Storyboard.TargetName="glassCube"
                            From="-60" To="-40" Duration="0:0:0.15" AutoReverse="False"/>
                                        <DoubleAnimation
                            Storyboard.TargetProperty="(Rectangle.RenderTransform).(TransformGroup.Children)[1].(RotateTransform.Angle)" Storyboard.TargetName="glassCube"
                            From="-40" To="-20" Duration="0:0:0.15" AutoReverse="False"/>
                                        <DoubleAnimation
                            Storyboard.TargetProperty="(Rectangle.RenderTransform).(TransformGroup.Children)[1].(RotateTransform.Angle)" Storyboard.TargetName="glassCube"
                            From="-20" To="0" Duration="0:0:0.15" AutoReverse="False"/>-->




                                        <!--<DoubleAnimation Storyboard.TargetName="glassCube" Storyboard.TargetProperty="(Rectangle.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)" From="0" To="-360" Duration="0:0:4" RepeatBehavior="Forever"/>
                                        <DoubleAnimation Storyboard.TargetName="glassCube" Storyboard.TargetProperty="(Rectangle.LayoutTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)" From="0" To="360" Duration="0:0:4" RepeatBehavior="Forever"/>

                                        <DoubleAnimation Storyboard.TargetName="glassCube" Storyboard.TargetProperty="(Rectangle.LayoutTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)" From="0" To="-360" Duration="0:0:4" RepeatBehavior="Forever"/>
                                        <DoubleAnimation Storyboard.TargetName="glassCube" Storyboard.TargetProperty="(Rectangle.LayoutTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)" From="0" To="360" Duration="0:0:4" RepeatBehavior="Forever"/>-->


                                        <!--<DoubleAnimation 
                                        Storyboard.TargetName="glassCube"
                                            Storyboard.TargetProperty="(Rectangle.LayoutTransform).(RotateTransform.Angle)"
                                             From="0.0" To="20" Duration="0:0:1" />
                                        <DoubleAnimation 
                                        Storyboard.TargetName="glassCube"
                                            Storyboard.TargetProperty="(Rectangle.LayoutTransform).(RotateTransform.Angle)"
                                             From="0.0" To="60" Duration="0:0:1" />
                                        <DoubleAnimation 
                                        Storyboard.TargetName="glassCube"
                                            Storyboard.TargetProperty="(Rectangle.LayoutTransform).(RotateTransform.Angle)"
                                             From="0.0" To="80" Duration="0:0:1" />
                                        <DoubleAnimation 
                                        Storyboard.TargetName="glassCube"
                                            Storyboard.TargetProperty="(Rectangle.LayoutTransform).(RotateTransform.Angle)"
                                             From="0.0" To="90" Duration="0:0:1" />-->

                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="Mouse.MouseLeave">
                            <EventTrigger.Actions>
                                <!-- Stopping the storyboard sets all animated properties back to default. -->
                                <StopStoryboard BeginStoryboardName="mouseEnterBeginStoryboard" />
                            </EventTrigger.Actions>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    
    <Style x:Key="JButton"  TargetType="{x:Type Button}" >
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" ClipToBounds="False">
                        <!-- Outer Rectangle with rounded corners. -->
                        <!--<Rectangle x:Name="outerRectangle" HorizontalAlignment="Stretch" 
                          VerticalAlignment="Stretch" Stroke="{TemplateBinding Background}" 
                          RadiusX="10" RadiusY="10" StrokeThickness="5" Fill="Transparent" />-->

                        <!-- Outer Highlight Rectangle with rounded corners for default buttons. -->
                        <!--<Rectangle x:Name="outerRectangleHighlight" HorizontalAlignment="Stretch" 
                                   VerticalAlignment="Stretch" 
                                   StrokeDashArray="0 2 10" Stroke="White" StrokeThickness="1" 
                                   RadiusX="100" RadiusY="100" Opacity="0"  />-->

                        <!-- Inner Rectangle with rounded corners. -->
                        <Rectangle x:Name="innerRectangle" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Stroke="Transparent" 
                            StrokeThickness="20" Fill="{TemplateBinding Background}" RadiusX="10" RadiusY="10" RenderTransformOrigin="0.5,0.5">

                            <Rectangle.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform />
                                    <RotateTransform Angle="0" CenterX="0.5" CenterY="0.5"/>
                                </TransformGroup>
                            </Rectangle.RenderTransform>


                        </Rectangle>

                        <!-- Glass Rectangle -->
                        <Rectangle x:Name="glassCube" Width="100" Height="50"
                                StrokeThickness="2" RadiusX="10" RadiusY="10" Opacity="0" 
                                Fill="{StaticResource MyGlassBrushResource}" RenderTransformOrigin="0.5,0.5">
                            <Rectangle.Stroke>
                                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                    <LinearGradientBrush.GradientStops>
                                        <GradientStop Offset="0.0" Color="LightBlue" />
                                        <GradientStop Offset="1.0" Color="Gray" />
                                    </LinearGradientBrush.GradientStops>
                                </LinearGradientBrush>
                            </Rectangle.Stroke>

                            <!-- These transforms have no effect as they are declared here. 
                                The reason the transforms are included is to be targets for animation (see later). -->
                            <Rectangle.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform />
                                    <RotateTransform Angle="0" CenterX="0.5" CenterY="0.5"/>
                                </TransformGroup>
                            </Rectangle.RenderTransform>

                            <Rectangle.LayoutTransform>
                                <TransformGroup>
                                    <ScaleTransform />
                                    <RotateTransform Angle="0" CenterX="0.5" CenterY="0.5"/>
                                </TransformGroup>
                            </Rectangle.LayoutTransform>

                            <!-- A BevelBitmapEffect is applied to give the button a "Beveled" look. -->
                            <Rectangle.BitmapEffect>
                                <BevelBitmapEffect />
                            </Rectangle.BitmapEffect>
                        </Rectangle>

                        <!-- Present Text of the button. -->
                        <DockPanel Name="myContentPresenterDockPanel" ClipToBounds="False">
                            <ContentPresenter x:Name="myContentPresenter" RecognizesAccessKey="True" Margin="4" Content="{TemplateBinding  Content}" TextBlock.Foreground="Black" ClipToBounds="False" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </DockPanel>
                    </Grid>

                    <ControlTemplate.Triggers>                      
                        <!-- Animation fires when button is clicked, causing glass to spin.  -->
                        <EventTrigger RoutedEvent="Button.Click">
                            <EventTrigger.Actions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <!--<DoubleAnimation Storyboard.TargetName="glassCube" Storyboard.TargetProperty=
                                          "(Rectangle.RenderTransform).(TransformGroup.Children)[1].(RotateTransform.Angle)" 
                                          By="360" Duration="0:0:0.5"/>-->
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <Trigger Property="Button.IsPressed" Value="True">
                            <Setter Property="Background" Value="{StaticResource MyGlassRadialBrushResource}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Button.Opacity" Value="0.4" />
                        </Trigger>
                        <!--<Trigger Property="IsDefault" Value="True">
                            <Setter Property ="Rectangle.Opacity" TargetName="outerRectangleHighlight"
                                  Value="1" />
                        </Trigger>-->
                        <!-- Set properties when mouse pointer is over the button. -->
                        <Trigger Property="IsMouseOver" Value="True">

                            <!-- Below are three property settings that occur when the condition is met (user mouses over button).  -->
                            <!-- Change the color of the outer rectangle when user mouses over it. -->
                            <!--<Setter Property ="Rectangle.Stroke" TargetName="outerRectangle"
                                  Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />-->

                            <!-- Sets the glass opacity to 1, therefore, the glass "appears" when user mouses over it. -->
                            <Setter Property="Rectangle.Opacity" Value="1" TargetName="glassCube" />


                            <!-- Makes the text slightly blurry as though you were looking at it through blurry glass. -->
                            <Setter Property="ContentPresenter.BitmapEffect" TargetName="myContentPresenter">
                                <Setter.Value>
                                    <BlurBitmapEffect Radius="1" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <!-- Set properties when button has focus. -->
                        <Trigger Property="IsFocused" Value="true">
                            <Setter Property="Rectangle.Opacity" Value="1"       TargetName="glassCube" />
                            <!--<Setter Property="Rectangle.Stroke" TargetName="outerRectangle"
                                  Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />-->
                            <Setter Property="Rectangle.Opacity" Value="1" TargetName="glassCube" />
                        </Trigger>
                        <!-- Animations that start when mouse enters and leaves button. -->
                        <EventTrigger RoutedEvent="Mouse.MouseEnter">
                            <EventTrigger.Actions>
                                <BeginStoryboard Name="mouseEnterBeginStoryboard">
                                    <Storyboard>

                                        <!-- This animation makes the glass rectangle shrink in the X direction. -->
                                        <!--<DoubleAnimation Storyboard.TargetName="glassCube" Storyboard.TargetProperty=
                                              "(Rectangle.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                              By="-0.1" Duration="0:0:0.5"  RepeatBehavior="1900" />-->

                                        <!-- This animation makes the glass rectangle shrink in the Y direction. -->
                                        <!--<DoubleAnimation Storyboard.TargetName="glassCube"  Storyboard.TargetProperty=
                                              "(Rectangle.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" 
                                              By="-0.1" Duration="0:0:0.5"  RepeatBehavior="300" />-->
                                        <!--<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)" Storyboard.TargetName="glassCube">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1" Value="40"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:2" Value="90"/>
                                        </DoubleAnimationUsingKeyFrames>-->
                                        <!--<DoubleAnimation 
                                        Storyboard.TargetName="glassCube"
                                            Storyboard.TargetProperty="(RenderTransform).(RotateTransform.Angle)"
                                             From="-45" To="45" Duration="0:0:1" AutoReverse="True"  RepeatBehavior="Forever"/>-->
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RenderTransform).(TransformGroup.Children)[1].(RotateTransform.Angle)" Storyboard.TargetName="glassCube">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="20"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="40"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.6" Value="60"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.8" Value="80"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1.0" Value="100"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1.2" Value="110"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1.4" Value="120"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1.6" Value="140"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1.8" Value="160"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:2.0" Value="180"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:2.2" Value="180"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:2.4" Value="160"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:2.6" Value="140"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:2.8" Value="120"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:3.0" Value="100"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:3.2" Value="80"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:3.4" Value="60"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:3.6" Value="40"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:3.8" Value="20"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:4.0" Value="0"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RenderTransform).(TransformGroup.Children)[1].(RotateTransform.Angle)" Storyboard.TargetName="innerRectangle">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-20"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="-40"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.6" Value="-60"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.8" Value="-80"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1.0" Value="-100"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1.2" Value="-110"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1.4" Value="-120"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1.6" Value="-140"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1.8" Value="-160"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:2.0" Value="-180"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:2.2" Value="-180"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:2.4" Value="-160"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:2.6" Value="-140"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:2.8" Value="-120"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:3.0" Value="-100"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:3.2" Value="-80"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:3.4" Value="-60"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:3.6" Value="-40"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:3.8" Value="-20"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:4.0" Value="0"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>

                            </EventTrigger.Actions>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="Mouse.MouseLeave">
                            <EventTrigger.Actions>
                                <!-- Stopping the storyboard sets all animated properties back to default. -->
                                <StopStoryboard BeginStoryboardName="mouseEnterBeginStoryboard" />
                            </EventTrigger.Actions>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>